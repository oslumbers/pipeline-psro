# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import lock_server_pb2 as lock__server__pb2


class LockServerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.TryToCheckoutLock = channel.unary_unary(
        '/LockServer/TryToCheckoutLock',
        request_serializer=lock__server__pb2.LockRequest.SerializeToString,
        response_deserializer=lock__server__pb2.LockConfirmation.FromString,
        )
    self.ReleaseLock = channel.unary_unary(
        '/LockServer/ReleaseLock',
        request_serializer=lock__server__pb2.LockRequest.SerializeToString,
        response_deserializer=lock__server__pb2.LockConfirmation.FromString,
        )
    self.GetAllLocksWithString = channel.unary_unary(
        '/LockServer/GetAllLocksWithString',
        request_serializer=lock__server__pb2.NameFilter.SerializeToString,
        response_deserializer=lock__server__pb2.LockList.FromString,
        )
    self.ReplaceLock = channel.unary_unary(
        '/LockServer/ReplaceLock',
        request_serializer=lock__server__pb2.LockReplaceRequest.SerializeToString,
        response_deserializer=lock__server__pb2.LockConfirmation.FromString,
        )
    self.Ping = channel.unary_unary(
        '/LockServer/Ping',
        request_serializer=lock__server__pb2.LockWorkerPing.SerializeToString,
        response_deserializer=lock__server__pb2.LockConfirmation.FromString,
        )


class LockServerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def TryToCheckoutLock(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReleaseLock(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetAllLocksWithString(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReplaceLock(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Ping(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LockServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'TryToCheckoutLock': grpc.unary_unary_rpc_method_handler(
          servicer.TryToCheckoutLock,
          request_deserializer=lock__server__pb2.LockRequest.FromString,
          response_serializer=lock__server__pb2.LockConfirmation.SerializeToString,
      ),
      'ReleaseLock': grpc.unary_unary_rpc_method_handler(
          servicer.ReleaseLock,
          request_deserializer=lock__server__pb2.LockRequest.FromString,
          response_serializer=lock__server__pb2.LockConfirmation.SerializeToString,
      ),
      'GetAllLocksWithString': grpc.unary_unary_rpc_method_handler(
          servicer.GetAllLocksWithString,
          request_deserializer=lock__server__pb2.NameFilter.FromString,
          response_serializer=lock__server__pb2.LockList.SerializeToString,
      ),
      'ReplaceLock': grpc.unary_unary_rpc_method_handler(
          servicer.ReplaceLock,
          request_deserializer=lock__server__pb2.LockReplaceRequest.FromString,
          response_serializer=lock__server__pb2.LockConfirmation.SerializeToString,
      ),
      'Ping': grpc.unary_unary_rpc_method_handler(
          servicer.Ping,
          request_deserializer=lock__server__pb2.LockWorkerPing.FromString,
          response_serializer=lock__server__pb2.LockConfirmation.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'LockServer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
